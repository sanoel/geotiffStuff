'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _get = require('cerebral-url-scheme-compiler/get');

var _get2 = _interopRequireDefault(_get);

var _toDisplayName = require('../helpers/toDisplayName');

var _toDisplayName2 = _interopRequireDefault(_toDisplayName);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var truthy = Symbol('truthy');
var falsy = Symbol('falsy');
var otherwise = Symbol('otherwise');

function when(path) {
  var outputs = arguments.length <= 1 || arguments[1] === undefined ? { isTrue: truthy, isFalse: otherwise } : arguments[1];

  var getValue = (0, _get2.default)(path);

  var whenTest = function whenTest(args, value) {
    // treat objects with no keys as falsy
    if (value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && Object.keys(value).length === 0) {
      value = false;
    }

    var otherwisePath = null;
    var outputPath = undefined;
    var test = undefined;

    for (var _path in outputs) {
      test = outputs[_path];
      if (test === otherwise) {
        otherwisePath = _path;
      } else {
        if (test === value || test === truthy && value || test === falsy && !value) {
          outputPath = _path;
          break;
        }
      }
    }

    args.output[outputPath || otherwisePath]();
  };

  var action = function whenRead(args) {
    var value = getValue(args);
    if (value && typeof value.then === 'function') {
      value.then(function (val) {
        return whenTest(args, val);
      }).catch(function (error) {
        console.error(action.displayName + ' caught an error whilst getting a value to test', error);
      });
    } else {
      whenTest(args, value);
    }
  };

  action.outputs = Object.keys(outputs);

  action.displayName = 'addons.when(' + (0, _toDisplayName2.default)(path, getValue) + ')';

  return action;
}

when.truthy = truthy;
when.falsy = falsy;
when.otherwise = otherwise;

exports.default = when;