'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var execute = function execute(state, values, urlPath, fn, isGetter) {
  if (isGetter) {
    return urlPath ? state[fn].apply(state, [urlPath].concat(_toConsumableArray(values))) : state[fn].apply(state, _toConsumableArray(values));
  } else {
    if (urlPath) {
      state[fn].apply(state, [urlPath].concat(_toConsumableArray(values)));
    } else {
      state[fn].apply(state, _toConsumableArray(values));
    }
    return values.length === 1 ? values[0] : values;
  }
};

exports.default = function (path, url, urlPath, fn, isGetter) {
  if (url.host === '.') {
    console.warn('cerebral-url-scheme-compiler: state://./ is DEPRECATED. Please use state://module-name/ instead');
    // process on the current module
    var moduleFn = function moduleState(_ref) {
      var module = _ref.module;

      for (var _len = arguments.length, values = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        values[_key - 1] = arguments[_key];
      }

      return execute(module.state, values, urlPath, fn, isGetter);
    };
    moduleFn.displayName = 'module.state.' + fn;
    return moduleFn;
  } else if (url.host) {
    // process on the named module
    var moduleFn = function moduleState(_ref2) {
      var modules = _ref2.modules;
      var state = _ref2.state;

      var module = modules[url.host];
      if (!module) {
        return console.error(path + ' : module was not found.');
      }

      for (var _len2 = arguments.length, values = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        values[_key2 - 1] = arguments[_key2];
      }

      return execute(state, values, [].concat(_toConsumableArray(module.path), _toConsumableArray(urlPath)), fn, isGetter);
    };
    moduleFn.displayName = 'module.state.' + fn;
    return moduleFn;
  } else {
    // process on the global state
    var stateFn = function state(_ref3) {
      var state = _ref3.state;

      for (var _len3 = arguments.length, values = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        values[_key3 - 1] = arguments[_key3];
      }

      return execute(state, values, urlPath, fn, isGetter);
    };
    stateFn.displayName = 'state.' + fn;
    return stateFn;
  }
};