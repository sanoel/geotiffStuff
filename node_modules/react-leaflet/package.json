{
  "_args": [
    [
      "react-leaflet@file:../react-leaflet",
      "/Users/Samuel/Documents/workspace/TrialsTracker-Cerebral"
    ]
  ],
  "_from": "../react-leaflet",
  "_id": "react-leaflet@0.10.2",
  "_inCache": true,
  "_installable": true,
  "_location": "/react-leaflet",
  "_phantomChildren": {},
  "_requested": {
    "name": "react-leaflet",
    "raw": "react-leaflet@file:../react-leaflet",
    "rawSpec": "file:../react-leaflet",
    "scope": null,
    "spec": "/Users/Samuel/Documents/workspace/react-leaflet",
    "type": "directory"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "file:../react-leaflet",
  "_shasum": "e147b5b7115b69832cece113bbf40ac7d69072cd",
  "_shrinkwrap": null,
  "_spec": "react-leaflet@file:../react-leaflet",
  "_where": "/Users/Samuel/Documents/workspace/TrialsTracker-Cerebral",
  "author": {
    "email": "paul@ulem.net",
    "name": "Paul Le Cam"
  },
  "bugs": {
    "url": "https://github.com/PaulLeCam/react-leaflet/issues"
  },
  "dependencies": {
    "lodash": "^4.0.0"
  },
  "description": "React components for Leaflet maps",
  "devDependencies": {
    "babel-cli": "^6.6.5",
    "babel-core": "^6.7.2",
    "babel-eslint": "^5.0.0",
    "babel-jest": "^9.0.3",
    "babel-loader": "^6.2.4",
    "babel-plugin-react-transform": "^2.0.2",
    "babel-preset-es2015": "^6.6.0",
    "babel-preset-react": "^6.5.0",
    "babel-preset-stage-0": "^6.5.0",
    "eslint": "~2.2.0",
    "eslint-plugin-react": "^4.2.1",
    "jest-cli": "^0.9.2",
    "leaflet": "^0.7.7",
    "onchange": "^2.1.2",
    "react": "^0.14.7",
    "react-dom": "^0.14.7",
    "react-transform-hmr": "^1.0.4",
    "webpack": "^1.12.14",
    "webpack-dev-server": "^1.14.1"
  },
  "gitHead": "c36169ccc678facc6d38e9ae00eb792035d62418",
  "homepage": "https://github.com/PaulLeCam/react-leaflet",
  "jest": {
    "scriptPreprocessor": "<rootDir>/node_modules/babel-jest",
    "unmockedModulePathPatterns": [
      "<rootDir>/node_modules/fbjs",
      "<rootDir>/node_modules/jest-cli",
      "<rootDir>/node_modules/leaflet",
      "<rootDir>/node_modules/lodash",
      "<rootDir>/node_modules/react",
      "<rootDir>/node_modules/react-dom"
    ]
  },
  "keywords": [
    "leaflet",
    "map",
    "react",
    "react-component"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "react-leaflet",
  "optionalDependencies": {},
  "peerDependencies": {
    "leaflet": "^0.7.0",
    "react": "^0.14.0 || ^15.0.0-rc.1",
    "react-dom": "^0.14.0 || ^15.0.0-rc.1"
  },
  "readme": "# React-Leaflet\n\nReact components for Leaflet maps.\n\n## Install\n\n```bash\nnpm install react-leaflet\n```\n\nReact, ReactDOM and Leaflet are peer dependencies, if you haven't already installed them use:\n\n```bash\nnpm install leaflet react react-dom react-leaflet\n```\n\nAn UMD build is also available on [npmcdn](https://npmcdn.com/):\n\n```html\n<script src=\"https://npmcdn.com/react-leaflet/dist/react-leaflet.min.js\"></script>\n```\n\nThe library is injected as `window.ReactLeaflet`.\n\n## Getting started\n\nIf you are not familiar with Leaflet, make sure you read its [quick start guide](http://leafletjs.com/examples/quick-start.html) first. You will need to add its CSS to your page to render the components properly.\n\nAll components are React wrappers for Leaflet elements and layers, they need a map instance and therefore must be included in a top-level `<Map>` component.\n\n**Leaflet example**\n```js\nimport L from 'leaflet';\n\nconst position = [51.505, -0.09];\nconst map = L.map('map').setView(position, 13);\n\nL.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {\n  attribution: '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n}).addTo(map);\n\nL.marker(position).addTo(map)\n  .bindPopup('A pretty CSS3 popup. <br> Easily customizable.');\n```\n\n**React-Leaflet**\n```js\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { Map, Marker, Popup, TileLayer } from 'react-leaflet';\n\nconst position = [51.505, -0.09];\nconst map = (\n  <Map center={position} zoom={13}>\n    <TileLayer\n      url='http://{s}.tile.osm.org/{z}/{x}/{y}.png'\n      attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n    />\n    <Marker position={position}>\n      <Popup>\n        <span>A pretty CSS3 popup.<br/>Easily customizable.</span>\n      </Popup>\n    </Marker>\n  </Map>\n);\n\nrender(map, document.getElementById('map-container'));\n```\nNote that the `<Map>` component creates its own `<div>` container for the map, it does not get attached to an existing node.\n\n## Technical considerations\n\nThis library uses React components as an interface, but not the virtual DOM, as all the DOM manipulations are managed by Leaflet, so there are a few things to keep in mind when using it:\n\n- Leaflet makes direct calls to the DOM when it is loaded, therefore this library is not compatible with server-side rendering.\n- The components exposed are abstractions for Leaflet layers, not DOM elements. Some of them have properties that can be updated directly by calling the setters exposed by Leaflet while others should be completely replaced, by setting an unique value on their `key` property so that they are properly handled by React's algorithm.\n- Not all layers are implemented and even less tested.\n\n## API\n\n### Helpers\n\n**setIconDefaultImagePath(path: string)**: Setter for `Leaflet.Icon.Default.imagePath`, set to `//cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images` by default.\n\n### PropTypes\n\n**latLng**: One of `[number, number]`, `{lat: number, lng: number}` or `{lat: number, lon: number}`.\n\n**latLngList**: An Array of *LatLng*.\n\n**bounds**: An instance of *Leaflet.LatLngBounds* or a *LatLngList*.\n\n**controlPosition**: One of `topleft`, `topright`, `bottomleft` or `bottomright`.\n\n### Events\n\nLeaflet exposes its own events, different from React. You can listen to them using React-Leaflet by adding a callback to a property prefixed by `onLeaflet` or simply `on`. Ex: `<Map onLeafletMoveend={this.handleMoveend}>...</Map>`.  \nCheck Leaflet documentation for the events associated to each component.\n\n### Components\n\nThe properties documented as **dynamic properties** are updated using the relevant Leaflet setter, other properties will *not* update the component when they are changed after the component is mounted.  \nAll other properties are passed as the `options` argument to their corresponding Leaflet element and should work fine for static maps, it is however unlikely that they would updated if you change them afterwards.\n\nYou can directly access the Leaflet element created by a component using the `getLeafletElement()` method on this component. This leaflet element is usually created in `componentWillMount()`, except for the `Map` component where it can only be created after the `<div>` container is rendered.\n\n#### Base components\n\nThese components are base classes used by other components. They can be extended to create custom components but should not be used directly.\n\n##### MapComponent\n\nBase class extending `React.Component` and handling events binding and unbind.  \nIt exposes a `getLeafletElement()` method to access the `Leaflet` object created for the component.\n\n##### MapControl\n\nBase class extending `React.Component` for controls.  \nIt exposes a `getLeafletElement()` method to access the `Leaflet` object created for the control.\n\n##### MapLayer\n\nBase class extending [`MapComponent`](#mapcomponent) using the provided `map` prop to add its element and passing it down to its children.  \nIt exposes the following methods:\n- `getClonedChildrenWithMap(object extra): object`: returns the cloned children of the component, adding the `map` and the `extra` props provided to them.\n- `renderChildrenWithProps(object props): object`: returns the cloned children of the component using `getClonedChildrenWithMap()`, wrapped in a `<div>` with `display: none` style.\n\n##### BaseTileLayer\n\nBase class extending [`MapLayer`](#maplayer) with a `render()` method and handling a TitleLayer `opacity` and `zIndex` props.\n\n##### Path\n\nBase class extending [`MapLayer`](#maplayer) with the following methods:\n- `getPathOptions(object props): object`: filters the input `props` and return a new object of [Path options](http://leafletjs.com/reference.html#path-options) properties.\n- `setStyle(object options = {}): void`: alias to the Leaflet element [`setStyle()`](http://leafletjs.com/reference.html#path-setstyle).\n- `setStyleIfChanged(object fromProps, object toProps): void`: extracts the Path options of the two arguments, and calls `setStyle()` with the new options if different from the previous ones.\n\n#### Map\n\nThis is the top-level component that must be mounted for children ones to be rendered. Refer to [Leaflet documentation](http://leafletjs.com/reference.html#map-options) for more information about the properties.\n\n**Dynamic properties**\n- `animate: boolean` (optional): If `true`, panning will always be animated if possible. Defaults to `false`.\n- `bounds: bounds` (optional): A rectangle for the map to contain. It will be centered, and the map will zoom in as close as it can while still showing the full bounds. This property is dynamic, if you change it it will be reflected on the map.\n- `boundsOptions: object` (optional): Options passed to the `fitBounds()` method.\n- `center: latLng` (optional): Center of the map. This property is dynamic, if you change it it will be reflected in the map.\n- `className: string` (optional): className property of the `<div>` container for the map.\n- `maxBounds: bounds` (optional)\n- `style: object` (optional): style property of the `<div>` container for the map.\n- `zoom: number` (optional)\n\n**Other properties**\n- `id: string` (optional): The ID of the `<div>` container for the map. If you don't provide it, a unique one will be created.\n\n#### UI Layers\n\n##### Marker\n\n[Leaflet reference](http://leafletjs.com/reference.html#marker)\n\n**Dynamic properties**\n- `position: latLng` (required)\n- `icon: Leaflet.Icon` (optional)\n- `zIndexOffset: number` (optional)\n- `opacity: number` (optional)\n\n##### Popup\n\n[Leaflet reference](http://leafletjs.com/reference.html#popup)\n\nThe Popup children will be rendered using `ReactDOM.render()`, they must be valid React elements.\n\n**Dynamic properties**\n- `position: latLng` (optional)\n\n#### Raster Layers\n\n##### TileLayer\n\n[Leaflet reference](http://leafletjs.com/reference.html#tilelayer)\n\n**Dynamic properties**\n- `url: string` (required)\n- `opacity: number` (optional)\n- `zIndex: number` (optional)\n\n##### ImageOverlay\n\n[Leaflet reference](http://leafletjs.com/reference.html#imageoverlay)\n\n**Dynamic properties**\n- `url: string` (required)\n- `opacity: number` (optional)\n\n##### Implemented but needing testing and documentation\n\n- CanvasTileLayer\n- WMSTileLayer\n\n#### Vector Layers\n\nAll vector layers extend the **Path** component and therefore accept dynamic [Path options](http://leafletjs.com/reference.html#path-options) properties.\n\n##### Circle\n\n[Leaflet reference](http://leafletjs.com/reference.html#circle)\n\n**Dynamic properties**\n- `center: latLng` (required)\n- `radius: number` (required)\n\n##### CircleMarker\n\n[Leaflet reference](http://leafletjs.com/reference.html#circlemarker)\n\n**Dynamic properties**\n- `center: latLng` (required)\n- `radius: number` (optional)\n\n##### Polyline\n\n[Leaflet reference](http://leafletjs.com/reference.html#polyline)\n\n**Dynamic properties**\n- `positions: latLngList` (required)\n\n##### MultiPolyline\n\n[Leaflet reference](http://leafletjs.com/reference.html#multipolyline)\n\n**Dynamic properties**\n- `polylines: array<latLngList>` (required)\n\n##### Polygon\n\n[Leaflet reference](http://leafletjs.com/reference.html#polygon)\n\n**Dynamic properties**\n- `positions: latLngList | Array<latLngList>` (required)\n\n##### MultiPolygon\n\n[Leaflet reference](http://leafletjs.com/reference.html#multipolygon)\n\n**Dynamic properties**\n- `polygons: array<latLngList>` (required)\n\n##### Rectangle\n\n[Leaflet reference](http://leafletjs.com/reference.html#rectangle)\n\n**Dynamic properties**\n- `bounds: bounds` (required, dynamic)\n\n#### Other Layers\n\n##### LayerGroup\n\nUse the `LayerGroup` wrapper component to group children layers together.\n\n##### FeatureGroup\n\nExtended `LayerGroup` supporting a `Popup` child.\n\n##### GeoJson\n\n[Leaflet reference](http://leafletjs.com/reference.html#geojson)\n\n**Properties**\n- `data: GeoJSON` (required). This property will *not* be updated if it is changed after the component is mounted.\n\n#### Controls\n\n##### AttributionControl\n\n[Leaflet reference](http://leafletjs.com/reference.html#control-attribution)\n\n**Dynamic properties**\n- `position: controlPosition` (optional)\n\n##### LayersControl\n\n[Leaflet reference](http://leafletjs.com/reference.html#control-layers)\n\n**Dynamic properties**\n- `position: controlPosition` (optional)\n\n**Other properties**\n- `baseLayers: object` (optional)\n- `overlays: object` (optional)\n\n##### ScaleControl\n\n[Leaflet reference](http://leafletjs.com/reference.html#control-scale)\n\n**Dynamic properties**\n- `position: controlPosition` (optional)\n\n##### ZoomControl\n\n[Leaflet reference](http://leafletjs.com/reference.html#control-zoom)\n\n**Dynamic properties**\n- `position: controlPosition` (optional)\n\n## Creating custom components\n\nIf you want to create custom components, for example Leaflet plugins, you could extend one of the [base components](https://github.com/PaulLeCam/react-leaflet#base-components) depending on the type of component you want to implement.  \nThe created Leaflet map instance is injected by the `Map` component to all its children as the `map` property. Make sure to inject it in your component's children as well.\n\n## Changelog\n\nSee [CHANGELOG](https://github.com/PaulLeCam/react-leaflet/blob/master/CHANGELOG.md) file.\n\n## License\n\nMIT  \nSee [LICENSE](https://github.com/PaulLeCam/react-leaflet/blob/master/LICENSE) file.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/PaulLeCam/react-leaflet.git"
  },
  "scripts": {
    "build": "npm run build:lib && npm run build:dist",
    "build:dist": "webpack src/index.js dist/react-leaflet.js & webpack -p src/index.js dist/react-leaflet.min.js",
    "build:lib": "npm run clean:lib && npm run compile:lib",
    "clean:lib": "rm -Rf ./lib",
    "compile:lib": "babel src --out-dir lib",
    "dev": "npm run watch & npm run onchange",
    "examples": "webpack-dev-server --config ./example/webpack.config.js",
    "lint": "eslint ./src",
    "lintAndTest": "npm run lint && jest",
    "onchange": "onchange 'src/*.js' 'src/**/*.js' -- npm run lintAndTest",
    "prepublish": "npm ls && npm start",
    "start": "npm run lint && npm run test && npm run build",
    "test": "jest --coverage",
    "watch": "babel src --watch --out-dir lib"
  },
  "version": "0.10.2"
}
